---
// import { getCookie } from "../utils/cookieUtils";
const { addToCart } = Astro.props;
---

<div id="product-container" class="product-list">
    <div class="no-products">
        <h3>Loading products...</h3>
    </div>
</div>

<script>
    const api = import.meta.env.PUBLIC_API;

    const getCookie = (name) => {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) {
            return parts.pop().split(";").shift();
        }
    };
    const makeRequest = async () => {
        const getCookie = (name) => {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) {
                return parts.pop().split(";").shift();
            }
        };
        const cookie = getCookie("access_token");

        try {
            const response = await fetch(
                api+"/customer/products",
                {
                    method: "GET",
                    headers: {
                        "Content-Type": "application/json",
                        Cookie: `access_token=${cookie}`,
                    },
                    credentials: "include",
                },
            );

            if (!response.ok) {
                console.log("response is not fine", response);
                console.log(response.status);
                if (response.status == 403) {
                    window.location.href = "http://localhost:4321/login";
                    alert("please login");
                }
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            const products = data.products;
            updateProductList(products);
        } catch (error) {
            console.error("Error fetching products:", error);
            updateProductList([]);
        }
    };

    const updateProductList = (products) => {
        const container = document.getElementById("product-container");

        if (products.length === 0) {
            container.innerHTML = `
                <div class="no-products">
                    <h3>No products available.</h3>
                </div>
            `;
        } else {
            container.innerHTML = products
                .map(
                    (product) => `
                   <a>
                        <div class="product" id="${product._id}">
                            <img src="${product.image}" alt="Product Image">
                            <h4>${product.title}</h4>
                            <p>Price: ${product.price}</p>
                            <button>Buy</button> 
                            <button class="add-to-cart" data-id="${product._id}">Add to Cart</button>
                        </div>
                    </a> 

            `,
                )
                .join("");

            const buttons = document.querySelectorAll(".add-to-cart");
            buttons.forEach((button) => {
                button.addEventListener("click", () => {
                    const productId = button.getAttribute("data-id");
                    addToCart(productId);
                });
            });
        }
    };

    document.addEventListener("DOMContentLoaded", makeRequest);

    async function addToCart(productId: string) {
        const cookie = getCookie("access_token");
        const data = {
            product_id: productId,
            quantity: 1,
        };
        try {
            const response = await fetch(api + "/customer/add_to_cart", {
                method: "POST",
                credentials: "include",
                headers: {
                    "Content-Type": "application/json",
                    Cookie: `access_token=${cookie}`,
                },
                body: JSON.stringify(data),
            });

            if (!response.ok) {
                throw new Error(`HTTP Error status : ${response.status}`);
            } else {
                const result = await response.json();
                alert("Item added to the cart");
                console.log(result);
            }
        } catch (error) {
            console.error("Error is ", error);
        }
    }
</script>

<style>
    /* Container for product list */
    #product-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
        padding: 20px;
    }

    /* Individual product box */
    .product {
        width: 250px;
        padding: 15px;
        background-color: #fff;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        text-align: center;
        transition:
            transform 0.3s ease,
            box-shadow 0.3s ease;
    }

    /* Product image */
    .product img {
        width: 100%;
        height: auto;
        border-radius: 8px;
        object-fit: cover;
    }

    /* Product title */
    .product h4 {
        font-size: 1.2rem;
        margin: 10px 0;
        color: #333;
    }

    /* Product price */
    .product p {
        font-size: 1rem;
        color: #555;
        margin-bottom: 15px;
    }

    /* Buttons inside the product box */
    .product button {
        padding: 10px 20px;
        background-color: #28a745;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin: 5px 0;
        transition: background-color 0.3s ease;
    }

    /* Hover effects for product box and buttons */
    .product:hover {
        transform: translateY(-5px);
        box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
    }

    .product button:hover {
        background-color: #218838;
    }

    /* Responsive adjustments for smaller screens */
    @media (max-width: 768px) {
        #product-container {
            justify-content: space-around;
        }

        .product {
            width: 200px;
        }
    }
</style>
